{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link'; // import gql from 'graphql-tag'\n\nconst AuthLink = (operation, next) => {\n  const token = localStorage.getItem('jwt');\n\n  if (token) {\n    operation.setContext(context => ({ ...context,\n      headers: { ...context.headers,\n        Authorization: `Bearer ${token}`\n      }\n    }));\n  }\n\n  return next(operation);\n};\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({\n        message,\n        locations,\n        path,\n        extensions\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n\n      if (networkError) {\n        console.log(`[Network error]: ${networkError}`);\n      }\n    }\n  }), AuthLink, new HttpLink({\n    uri: \"http://localhost:8002/graphql\",\n    credentials: 'same-origin'\n  })]),\n  cache: new InMemoryCache()\n}); // client.query({\n//     query: gql`\n//     {\n//         allcourses{\n//     courseNo\n//     courseName    \n//     semester {\n//       startMonth\n//       endMonth\n//       yearRange\n//     }   \n//   }    \n//     }\n//     `\n// }).then(result => {\n//   console.log(result)\n// })\n\nexport default client;","map":{"version":3,"sources":["/Users/ridgeagyei/Desktop/KingsProject/app/src/client/apollo/index.js"],"names":["ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","AuthLink","operation","next","token","localStorage","getItem","setContext","context","headers","Authorization","client","link","from","graphQLErrors","networkError","map","message","locations","path","extensions","console","log","uri","credentials","cache"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAAUC,QAAV,QAA0B,kBAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B,C,CAEA;;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AACpC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAd;;AACA,MAAGF,KAAH,EAAS;AACPF,IAAAA,SAAS,CAACK,UAAV,CAAqBC,OAAO,KAAK,EAC/B,GAAGA,OAD4B;AAE/BC,MAAAA,OAAO,EAAE,EACP,GAAGD,OAAO,CAACC,OADJ;AAEPC,QAAAA,aAAa,EAAG,UAASN,KAAM;AAFxB;AAFsB,KAAL,CAA5B;AAOD;;AACD,SAAOD,IAAI,CAACD,SAAD,CAAX;AACD,CAZD;;AAcA,MAAMS,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BgB,EAAAA,IAAI,EAAEZ,UAAU,CAACa,IAAX,CAAgB,CACpBd,OAAO,CAAC,CAAC;AAAEe,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KAAqC;AAC3C,QAAID,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA,IAAtB;AAA4BC,QAAAA;AAA5B,OAAD,KAEhBC,OAAO,CAACC,GAAR,CACG,6BAA4BL,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CAFF;;AAMA,UAAIJ,YAAJ,EAAkB;AAChBM,QAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBP,YAAa,EAA7C;AACD;AACF;AACF,GAZM,CADa,EAcpBd,QAdoB,EAepB,IAAIH,QAAJ,CAAa;AACXyB,IAAAA,GAAG,EAAE,+BADM;AAEXC,IAAAA,WAAW,EAAE;AAFF,GAAb,CAfoB,CAAhB,CADwB;AAqB9BC,EAAAA,KAAK,EAAE,IAAI5B,aAAJ;AArBuB,CAAjB,CAAf,C,CAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAec,MAAf","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport  { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { ApolloLink } from 'apollo-link'\n\n// import gql from 'graphql-tag'\n\nconst AuthLink = (operation, next) => {\n  const token = localStorage.getItem('jwt');\n  if(token){\n    operation.setContext(context => ({\n      ...context,\n      headers: {\n        ...context.headers,\n        Authorization: `Bearer ${token}`,\n      }\n    }))\n  }\n  return next(operation);\n}\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path, extensions }) =>\n        \n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n        if (networkError) {\n          console.log(`[Network error]: ${networkError}`);\n        }\n      }\n    }),\n    AuthLink,\n    new HttpLink({\n      uri: \"http://localhost:8002/graphql\",\n      credentials: 'same-origin'\n    }),\n  ]),\n  cache: new InMemoryCache(),\n});\n\n// client.query({\n//     query: gql`\n//     {\n//         allcourses{\n//     courseNo\n//     courseName    \n//     semester {\n//       startMonth\n//       endMonth\n//       yearRange\n//     }   \n//   }    \n//     }\n//     `\n// }).then(result => {\n//   console.log(result)\n// })\n\nexport default client;"]},"metadata":{},"sourceType":"module"}