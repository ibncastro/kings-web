{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\nconst AuthLink = (operation, next) => {\n  const token = localStorage.getItem('jwt');\n\n  if (token) {\n    operation.setContext(context => ({}));\n  }\n};\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n\n      if (networkError) {\n        console.log(`[Network error]: ${networkError}`);\n      }\n    }\n  }), new HttpLink({\n    uri: \"http://localhost:8002/graphql\"\n  })]),\n  cache: new InMemoryCache()\n}); // client.query({\n//     query: gql`\n//     {\n//         allcourses{\n//     courseNo\n//     courseName    \n//     semester {\n//       startMonth\n//       endMonth\n//       yearRange\n//     }   \n//   }    \n//     }\n//     `\n// }).then(result => console.log(result))\n\nexport default client;","map":{"version":3,"sources":["/Users/ridgeagyei/Desktop/KingsProject/app/src/client/apollo/index.js"],"names":["ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","AuthLink","operation","next","token","localStorage","getItem","setContext","context","client","link","from","graphQLErrors","networkError","map","message","locations","path","console","log","uri","cache"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAAUC,QAAV,QAA0B,kBAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AACpC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAd;;AACA,MAAGF,KAAH,EAAU;AACRF,IAAAA,SAAS,CAACK,UAAV,CAAqBC,OAAO,KAAK,EAAL,CAA5B;AACD;AACF,CALD;;AAOA,MAAMC,MAAM,GAAG,IAAIb,YAAJ,CAAiB;AAC9Bc,EAAAA,IAAI,EAAEV,UAAU,CAACW,IAAX,CAAgB,CACpBZ,OAAO,CAAC,CAAC;AAAEa,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KAAqC;AAC3C,QAAID,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,KAChBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADF;;AAKA,UAAIJ,YAAJ,EAAkB;AAChBK,QAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACD;AACF;AACF,GAXM,CADa,EAapB,IAAIf,QAAJ,CAAa;AACXsB,IAAAA,GAAG,EAAE;AADM,GAAb,CAboB,CAAhB,CADwB;AAkB9BC,EAAAA,KAAK,EAAE,IAAIxB,aAAJ;AAlBuB,CAAjB,CAAf,C,CAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeY,MAAf","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport  { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { ApolloLink } from 'apollo-link'\n\nconst AuthLink = (operation, next) => {\n  const token = localStorage.getItem('jwt');\n  if(token) {\n    operation.setContext(context => ({}))\n  }\n}\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n        if (networkError) {\n          console.log(`[Network error]: ${networkError}`);\n        }\n      }\n    }),\n    new HttpLink({\n      uri: \"http://localhost:8002/graphql\",\n    }),\n  ]),\n  cache: new InMemoryCache(),\n});\n\n// client.query({\n//     query: gql`\n//     {\n//         allcourses{\n//     courseNo\n//     courseName    \n//     semester {\n//       startMonth\n//       endMonth\n//       yearRange\n//     }   \n//   }    \n//     }\n//     `\n// }).then(result => console.log(result))\n\nexport default client;"]},"metadata":{},"sourceType":"module"}